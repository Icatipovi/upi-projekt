// <auto-generated />
using System;
using Football.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Football.Migrations
{
    [DbContext(typeof(FLContext))]
    [Migration("20221203200405_Init2")]
    partial class Init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Football.Models.City", b =>
                {
                    b.Property<int>("City_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_ID"));

                    b.Property<string>("NameOfCity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("City_ID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Football.Models.Coach", b =>
                {
                    b.Property<int>("Coach_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Coach_ID"));

                    b.Property<string>("CoachLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoachName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Coach_ID");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("Football.Models.Game", b =>
                {
                    b.Property<int>("Game_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Game_ID"));

                    b.Property<int>("GuestScore")
                        .HasColumnType("int");

                    b.Property<int?>("GuestTeam_ID")
                        .HasColumnType("int");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeam_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Game_ID");

                    b.HasIndex("GuestTeam_ID");

                    b.HasIndex("HomeTeam_ID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Football.Models.Player", b =>
                {
                    b.Property<int>("Player_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Player_ID"));

                    b.Property<double>("AverageMark")
                        .HasColumnType("float");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Player_ID");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Football.Models.Position", b =>
                {
                    b.Property<int>("Position_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Position_ID"));

                    b.Property<string>("NameOfPosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Position_ID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Football.Models.Scale", b =>
                {
                    b.Property<int>("Scale_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Scale_ID"));

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("ScalePosition")
                        .HasColumnType("int");

                    b.HasKey("Scale_ID");

                    b.ToTable("Scales");
                });

            modelBuilder.Entity("Football.Models.Team", b =>
                {
                    b.Property<int>("Team_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Team_ID"));

                    b.Property<int>("CityIdCity_ID")
                        .HasColumnType("int");

                    b.Property<int>("City_ID")
                        .HasColumnType("int");

                    b.Property<int>("Coach_ID")
                        .HasColumnType("int");

                    b.Property<string>("NameOfTeam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Scale_ID")
                        .HasColumnType("int");

                    b.Property<int>("Scale_ID1")
                        .HasColumnType("int");

                    b.HasKey("Team_ID");

                    b.HasIndex("CityIdCity_ID");

                    b.HasIndex("Scale_ID1");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Football.Models.Coach", b =>
                {
                    b.HasOne("Football.Models.Team", "Team")
                        .WithOne("Coach")
                        .HasForeignKey("Football.Models.Coach", "TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Football.Models.Game", b =>
                {
                    b.HasOne("Football.Models.Team", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestTeam_ID");

                    b.HasOne("Football.Models.Team", "Home")
                        .WithMany()
                        .HasForeignKey("HomeTeam_ID");

                    b.Navigation("Guest");

                    b.Navigation("Home");
                });

            modelBuilder.Entity("Football.Models.Player", b =>
                {
                    b.HasOne("Football.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("Football.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Position");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Football.Models.Team", b =>
                {
                    b.HasOne("Football.Models.City", "CityId")
                        .WithMany()
                        .HasForeignKey("CityIdCity_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Football.Models.Scale", "Scale")
                        .WithMany()
                        .HasForeignKey("Scale_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityId");

                    b.Navigation("Scale");
                });

            modelBuilder.Entity("Football.Models.Team", b =>
                {
                    b.Navigation("Coach")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
